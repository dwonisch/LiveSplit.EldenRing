# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/dotNET.gitlab-ci.yml

# The following script will work for any project that can be built from command line by msbuild
# It uses powershell shell executor, so you need to add the following line to your config.toml file
# (located in gitlab-runner.exe directory):
#   shell = "powershell"
#
# The script is composed of 3 stages: build, test and deploy.
#
# The build stage restores NuGet packages and uses msbuild to build the exe and msi
# One major issue you'll find is that you can't build msi projects from command line
# if you use vdproj.  There are workarounds building msi via devenv, but they rarely work
# The best solution is migrating your vdproj projects to WiX, as it can be build directly
# by msbuild.
#
# The test stage runs nunit from command line against Test project inside your solution
# It also saves the resulting TestResult.xml file
#
# The deploy stage copies the exe and msi from build stage to a network drive
# You need to have the network drive mapped as Local System user for gitlab-runner service to see it
# The best way to persist the mapping is via a scheduled task
# running the following batch command: net use P: \\x.x.x.x\Projects /u:your_user your_pass /persistent:yes

# place project specific paths in variables to make the rest of the script more generic
.shared_windows_runners:
  tags:
    - shared-windows
    - windows
    - windows-1809
   

variables:
  MAIN_PROJECT: 'DS3AutoSplit\DS3AutoSplit.csproj'
  RELEASE_FOLDER: 'DS3AutoSplit\bin\Release\net461\publish\'
  PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/ds3autosplit"
  VERSION: ""

stages:
  - build
  - prepare
  - upload
  - release

build_job:
  extends:
    - .shared_windows_runners
  stage: build
  script:
    - dotnet nuget add source "${CI_API_V4_URL}/projects/32713227/packages/nuget/index.json" --name memory --username gitlab-ci-token --password $CI_JOB_TOKEN --store-password-in-clear-text 
    - dotnet nuget add source "${CI_API_V4_URL}/projects/32938293/packages/nuget/index.json" --name packages --username gitlab-ci-token --password $CI_JOB_TOKEN --store-password-in-clear-text 
    - dotnet publish -c=Release
    - '$VERSION=$(Select-String -Path "DS3AutoSplit/DS3AutoSplit.csproj" -Pattern "<Version>(.*)</Version>" | % {$($_.matches.groups[1].Value)})'
    - Add-Content -Path variables.env -Value "TAG=${VERSION}"
    - if(${CI_COMMIT_BRANCH} -eq ${CI_DEFAULT_BRANCH}) { Compress-Archive -Path ${RELEASE_FOLDER}\LiveSplit.DarkSoulsIII.dll -DestinationPath ${RELEASE_FOLDER}\DS3AutoSplit.v${VERSION}.zip }
  artifacts:
    reports:
      dotenv: variables.env     
    expire_in: 1 week  # save gitlab server space, we copy the files we need to deploy folder later on
    paths:
      - '$env:RELEASE_FOLDER\*'  # saving exe to copy to deploy folder

upload_job:
  stage: upload
  image: curlimages/curl:latest
  needs:
    - job: build_job
      artifacts: true
  rules:
    - if: $CI_COMMIT_TAG
      when: never       
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  script:
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file DS3AutoSplit/bin/Release/net461/publish/DS3AutoSplit.v${TAG}.zip "${PACKAGE_REGISTRY_URL}/v${TAG}/"


release_job:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs:
    - job: upload_job
    - job: build_job
      artifacts: true
  rules:
    - if: $CI_COMMIT_TAG
      when: never                                  # Do not run this job when a tag is created manually
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH  # Run this job when commits are pushed or merged to the default branch
  script:
    - echo "running release_job for v$TAG"
  release:
    name: 'Release v$TAG'
    description: 'Created using the release-cli'  # $EXTRA_DESCRIPTION and the $TAG
    tag_name: 'v$TAG'                                                 # variables must be defined elsewhere
    ref: '$CI_COMMIT_SHA'                                            # in the pipeline. For example, in the
    assets: # Optional, multiple asset links
      links:
        - name: 'ZIP Archive'
          url: '${PACKAGE_REGISTRY_URL}/v${TAG}/DS3AutoSplit.v${TAG}.zip'
          link_type: 'package'
  artifacts:
    reports:
      dotenv: variables.env